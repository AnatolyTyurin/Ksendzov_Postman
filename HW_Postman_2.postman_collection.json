{
	"info": {
		"_postman_id": "901eab1c-534d-4643-acc2-78fd18b31391",
		"name": "HW_Postman_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24021571"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Body contains correct string\",() => {\r",
							"  pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let resp_f = pm.response.json();\r",
							"\r",
							"let req_f = request.data\r",
							"\r",
							"pm.test(\"Name is Anatoly\", () => {\r",
							"  pm.expect(resp_f.name).to.eql(\"Anatoly\");\r",
							"});\r",
							"\r",
							"pm.test(\"Age is 35\", () => {\r",
							"  pm.expect(resp_f.age).to.eql(\"35\");\r",
							"});\r",
							"\r",
							"pm.test(\"Salary is 1000\", () => {\r",
							"  pm.expect(resp_f.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Request name equals response name\", () => {\r",
							"  pm.expect(req_f.name).to.eql(resp_f.name);\r",
							"});\r",
							"\r",
							"pm.test(\"Request age equals response age\", () => {\r",
							"  pm.expect(req_f.age).to.eql(resp_f.age);\r",
							"});\r",
							"\r",
							"pm.test(\"Request salary equals response salary\", () => {\r",
							"  pm.expect(+req_f.salary).to.eql(resp_f.salary);\r",
							"});\r",
							"\r",
							"console.log(resp_f.family)\r",
							"\r",
							"pm.test(\"User salary in 1.5 year equals salary * 4\", () => {\r",
							"  pm.expect(req_f.salary*4).to.eql(resp_f.family.u_salary_1_5_year);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Anatoly",
							"type": "text"
						},
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let resp_f = pm.response.json();\r",
							"\r",
							"let req_f = request.data\r",
							"\r",
							"pm.test(\"Name is Anatoly\", () => {\r",
							"  pm.expect(resp_f.name).to.eql(\"Anatoly\");\r",
							"});\r",
							"\r",
							"pm.test(\"Age is 35\", () => {\r",
							"  pm.expect(resp_f.age).to.eql(\"35\");\r",
							"});\r",
							"\r",
							"pm.test(\"Salary is 1000\", () => {\r",
							"  pm.expect(resp_f.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"console.log(resp_f.family)\r",
							"\r",
							"pm.test(\"Property dog has property name in it\", () => {\r",
							"  pm.expect(resp_f.family.pets.dog).to.have.any.keys(\"name\");\r",
							"});\r",
							"\r",
							"pm.test(\"Property dog has property age in it\", () => {\r",
							"  pm.expect(resp_f.family.pets.dog).to.have.any.keys(\"age\");\r",
							"});\r",
							"\r",
							"pm.test(\"Key name has value Luky\", () => {\r",
							"  pm.expect(resp_f.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"pm.test(\"Key age has value 4\", () => {\r",
							"  pm.expect(resp_f.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Anatoly&age=35&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Anatoly"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let resp_f = pm.response.json();\r",
							"\r",
							"let query = {};\r",
							"pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});\r",
							"\r",
							"pm.test(\"Request name equals response name\", () => {\r",
							"  pm.expect(query.name).to.eql(resp_f.name);\r",
							"});\r",
							"\r",
							"pm.test(\"Request age equals response age\", () => {\r",
							"  pm.expect(+query.age).to.eql(resp_f.age);\r",
							"});\r",
							"\r",
							"let req_salary = query.salary\r",
							"\r",
							"console.log(\"request salary = \" + req_salary)\r",
							"\r",
							"console.log(\"response salary = \" + resp_f.salary)\r",
							"\r",
							"console.log(\"response salary = \" + resp_f.salary[0])\r",
							"\r",
							"console.log(\"response salary = \" + resp_f.salary[1])\r",
							"\r",
							"console.log(\"response salary = \" + resp_f.salary[2])\r",
							"\r",
							"pm.test(\"Salary property [0] in response equals request salary\", () => {\r",
							"  pm.expect(+query.salary).to.eql(resp_f.salary[0]);\r",
							"});\r",
							"\r",
							"pm.test(\"Salary property [1] in response equals request salary * 2\", () => {\r",
							"  pm.expect(+query.salary*2).to.eql(+resp_f.salary[1]);\r",
							"});\r",
							"\r",
							"pm.test(\"Salary property [2] in response equals request salary * 3\", () => {\r",
							"  pm.expect(+query.salary*3).to.eql(+resp_f.salary[2]);\r",
							"});\r",
							"\r",
							"pm.environment.set(\"name\", query.name)\r",
							"\r",
							"pm.environment.set(\"age\", query.age)\r",
							"\r",
							"pm.environment.set(\"salary\", query.salary)\r",
							"\r",
							"//1-ый вариант\r",
							"for(let i = 0; i < resp_f.salary.length; i++){console.log(resp_f.salary[i])}\r",
							"\r",
							"//2-ой вариант\r",
							"for (item in resp_f.salary) {\r",
							"    console.log(resp_f.salary[item]);\r",
							"};\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Anatoly&age=35&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Anatoly"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let resp_f = pm.response.json()\r",
							"\r",
							"let req_f = request.data\r",
							"\r",
							"pm.test(\"Json response has property start_qa_salary\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"pm.test(\"Json response has property qa_salary_after_6_months\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"pm.test(\"Json response has property qa_salary_after_12_months\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"pm.test(\"Json response has property qa_salary_after_1.5_years\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"pm.test(\"Json response has property qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"pm.test(\"Json response has property person\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"pm.test(\"Property salary in request equals property start_qa_salary in response\", function () {\r",
							"    pm.expect(+req_f.salary).to.eql(+resp_f.start_qa_salary);\r",
							"});\r",
							"\r",
							"pm.test(\"Property salary*2 in request equals property qa_salary_after_6_months in response\", function () {\r",
							"    pm.expect(+req_f.salary*2).to.eql(+resp_f.qa_salary_after_6_months);\r",
							"});\r",
							"\r",
							"pm.test(\"Property salary*2.7 in request equals property qa_salary_after_12_months in response\", function () {\r",
							"    pm.expect(+req_f.salary*2.7).to.eql(+resp_f.qa_salary_after_12_months);\r",
							"});\r",
							"\r",
							"pm.test(\"Property salary*3.3 in request equals property qa_salary_after_1.5_years in response\", function () {\r",
							"    pm.expect(+req_f.salary*3.3).to.eql(+resp_f[\"qa_salary_after_1.5_year\"]);\r",
							"});\r",
							"\r",
							"pm.test(\"Property salary*3.8 in request equals property qa_salary_after_3.5_years in response\", function () {\r",
							"    pm.expect(+req_f.salary*3.8).to.eql(+resp_f[\"qa_salary_after_3.5_years\"]);\r",
							"});\r",
							"\r",
							"pm.test(\"Element N1 in property u_name in response equals salary in request\", function () {\r",
							"    pm.expect(+req_f.salary).to.eql(+resp_f.person.u_name[1]);\r",
							"});\r",
							"\r",
							"pm.test(\"Property u_age in response equals age in request\", function () {\r",
							"    pm.expect(+req_f.age).to.eql(+resp_f.person.u_age);\r",
							"});\r",
							"\r",
							"pm.test(\"Property salary*4.2 in request equals property u_salary_5_years in response\", function () {\r",
							"    pm.expect(+req_f.salary*4.2).to.eql(+resp_f.person.u_salary_5_years);\r",
							"});\r",
							"\r",
							"//1-ый вариант\r",
							"let prop_k = Object.keys(resp_f.person)\r",
							"let prop_v = Object.values(resp_f.person)\r",
							"for(let i = 0; i < prop_k.length; i++){console.log(prop_k[i], prop_v[i])}\r",
							"\r",
							"//2-ой вариант\r",
							"for (key in resp_f.person) {\r",
							"    console.log(key, resp_f.person[key]);\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}